# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.hostname = "ca-analytics-local"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "33.33.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "../www", "/var/www/html", nfs: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Map localhost on the Mac so that we get out traffic mapping automatcically
  # ...this does mean we can only have one Vagrant box running using this setup at a time...
  config.trigger.after [:provision, :up, :reload] do
      system('echo "
rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 80 -> 127.0.0.1 port 8092
rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 443 -> 127.0.0.1 port 8443
" | sudo pfctl -f - > /dev/null 2>&1; echo "==> Fowarding Vagrant Ports: 80 -> 8092, 443 -> 8443"')
  end

  # And attach the removal of the port mapping to either the halt or destroy events
  config.trigger.after [:halt, :destroy] do
    system("sudo pfctl -f /private/etc/pf.conf > /dev/null 2>&1; echo '==> Removing Port Forwarding'")
  end


  ## Shell Provisioning
  config.vm.provision "shell", inline: "export DEBIAN_FRONTEND=noninteractive"
  config.vm.provision "file", source: "provisioning/base.sh", destination: "/tmp/base.sh"

  ## install system
  config.vm.provision "shell", path: "provisioning/debian-up.sh"

  # config.vm.provision :shell do |s|
  #     s.path = "provisioning/install-package.sh"
  #     s.args = "python-software-properties python software-properties-common"
  # end

  ## install apache
  config.vm.provision :shell do |s|
      s.path = "provisioning/install-package.sh"
      s.args = "apache2"
  end

  $db_password = 'password123'

  ## Configure and Install the database
  config.vm.provision :shell do |s|
    s.path = "provisioning/database-setup.sh"
    s.args = [$db_password]
  end

  ## Configure the database
  config.vm.provision :shell do |s|
    s.path = "provisioning/database-configure.sh"
    s.args = [$db_password, 'owa_analysis']
  end

  ## install php and php libs
  config.vm.provision :shell do |s|
      s.path = "provisioning/install-package.sh"
      s.args = "php5 libapache2-mod-php5 php5-cli php5-mysql php5-gd php5-mcrypt php-pear php5-curl php5-common php5-dev php5-json php5-sqlite phpunit"
  end

  ## enable mcrypt as it's not available initially
  config.vm.provision "shell", inline: "sudo php5enmod mcrypt"


 ## Now we'll allow the root user to connect to the db over from anywhere
 ## This is obviouly ONLY FOR LOCAL DEVELOPMENT!!!!!!!!!!
$db_privilege = <<SCRIPT
echo /usr/bin/mysql -u root -p$db_password -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '' WITH GRANT OPTION; FLUSH PRIVILEGES;"
SCRIPT

  # config.vm.provision "shell", inline: $db_privilege

  ## Set Apache permissions
  config.vm.provision "shell", path: "provisioning/apache-setup.sh"

  ## Udpate default virtual host and restart Apache
  config.vm.provision "shell", path: "provisioning/install-vhost.sh"

  ## lets remove the index.html file that apache creates on install
  config.vm.provision "shell", inline: "/bin/rm -f /var/www/html/index.html"


end
